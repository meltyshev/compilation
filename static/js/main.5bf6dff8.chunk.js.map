{"version":3,"sources":["serviceWorkerRegistration.js","with-auth.jsx","index.js","use-field.js","App.jsx","App.module.css"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","message","WrappedComponent","registerMethod","initialValue","useState","value","setValue","useCallback","_","nextValue","DATABASE","dictionary","array","database","set","Set","associations","FORMATS_MAP","isZerkalo","word1","word2","length","split","reverse","join","isAnagram","sort","isPlusogram","word1Sorted","word2Sorted","hasDifference","i","charAt","isMetagram","isMetanagram","replace","isTlenogram","isLogogrif","isLogogrif2","totalDifferences","isLogogrif3","isMetagrif","isBrukva","isTikva","createHybrid2","intersection","slice","toUpperCase","createHybrid3","createHybrid4","createSharada","dictionarySet","word","has","createGolovahvosts","golovahvosts","word1Tail","j","push","createEmptyFormats","selectedFormatsSet","reduce","result","format","getFormats","words","isBidirectional","isIntersection","formats","forEach","wordDictionary","zerkala","anagrams","plusograms","metagrams","metanagrams","tlenograms","logogrifs","logogrifs2","logogrifs3","metagrifs","brukvas","tikvas","hybrids2","hybrid2","hybrids3","hybrid3","hybrids4","hybrid4","sharadas","sharada","map","golovahvost","withAuth","setSelectedFormatsSet","useField","handleIsBidirectionalChange","handleWord1Change","handleWord2Change","useDebounce","word1Debounced","word2Debounced","word1Clean","useMemo","trim","toLowerCase","word2Clean","words1","words2","Object","keys","a","b","getIntersectionFormats","endsWith","handleSelectedFormatChange","filter","className","styles","header","Container","Grid","padded","stackable","Row","Column","width","Form","Input","fluid","autoFocus","placeholder","size","onChange","Modal","trigger","Button","icon","Header","content","Content","Group","grouped","formatLabel","Checkbox","key","label","checked","Divider","horizontal","as","title","Label","classNames","odd","localStorage","getItem","URLSearchParams","search","registerString","registerStringPrev","includes","setItem","ReactDOM","render","document","getElementById","serviceWorkerRegistration","module","exports"],"mappings":"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","file":"static/js/main.5bf6dff8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = 'u7CCxA';\n\nexport default (WrappedComponent) => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      if (localStorage.getItem('registered') === 'true') {\n        return true;\n      }\n\n      return (\n        window.location.hostname === HOSTNAME &&\n        new URLSearchParams(window.location.search).get('token') === TOKEN\n      );\n    }, []);\n\n    if (!isAuthenticated) {\n      return '💁‍♂️';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport App from './App';\n\nconst registerString = new URLSearchParams(window.location.search).get('register');\nconst registerStringPrev = localStorage.getItem('registered');\n\nlet registerMethod;\nif (['true', 'false'].includes(registerString)) {\n    const register = registerString === 'true';\n    registerMethod = register ? 'register' : 'unregister';\n\n    if (registerString !== registerStringPrev) {\n        localStorage.setItem('registered', register);\n    }\n} else {\n    registerMethod = registerStringPrev === 'true' ? 'register' : 'unregister';\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorkerRegistration[registerMethod]();\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback((_, { value: nextValue }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport {\n  Button,\n  Container,\n  Divider,\n  Form,\n  Grid,\n  Header,\n  Input,\n  Label,\n  Modal,\n} from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport database from './database.json';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst DATABASE = {\n  dictionary: {\n    array: database.dictionary,\n    set: new Set(database.dictionary),\n  },\n  associations: database.associations,\n};\n\nconst FORMATS_MAP = [\n  ['anagrams', 'Анаграммы'],\n  ['brukvas', 'Брюквы'],\n  ['hybrids2', 'Гибриды (2)'],\n  ['hybrids3', 'Гибриды (3)'],\n  ['hybrids4', 'Гибриды (4)'],\n  ['golovahvosts', 'Головахвосты'],\n  ['zerkala', 'Зеркала'],\n  ['logogrifs', 'Логогрифы'],\n  ['logogrifs2', 'Логогрифы +2'],\n  ['logogrifs3', 'Логогрифы +3'],\n  ['metagrams', 'Метаграммы'],\n  ['metagrifs', 'Метагрифы'],\n  ['metanagrams', 'Метанаграммы'],\n  ['plusograms', 'Плюсограммы'],\n  ['tlenograms', 'Тленограммы'],\n  ['tikvas', 'Тыквы'],\n  ['sharadas', 'Шарады'],\n];\n\nconst isZerkalo = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  return word1 === word2.split('').reverse().join('');\n};\n\nconst isAnagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  return word1Sorted === word2Sorted;\n};\n\nconst isPlusogram = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  let hasDifference = false;\n  for (let i = 0; i < word2Sorted.length; i++) {\n    if (word1Sorted.charAt(i - +hasDifference) !== word2Sorted.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n};\n\nconst isMetagram = (word1, word2) => {\n  if (word1.length === 1 || word1.length !== word2.length) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word1.length; i++) {\n    if (word1.charAt(i) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n};\n\nconst isMetanagram = (word1, word2) => {\n  if (word1.length === 1 || word1.length !== word2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 1;\n};\n\nconst isTlenogram = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 2;\n};\n\nconst isLogogrif = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +hasDifference) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n};\n\nconst isLogogrif2 = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 2) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n};\n\nconst isLogogrif3 = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 3) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1 || totalDifferences === 2) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 3) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 3;\n};\n\nconst isMetagrif = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) !== word2.charAt(i)) {\n      totalDifferences++;\n\n      if (totalDifferences > 2) {\n        break;\n      }\n    }\n  }\n\n  if (totalDifferences === 2) {\n    return true;\n  }\n\n  totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +(totalDifferences === 2)) !== word2.charAt(i)) {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n};\n\nconst isBrukva = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n};\n\nconst isTikva = (word1, word2) => {\n  if (word1.length <= 2 || word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1 || totalDifferences === 2) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 3) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 3;\n};\n\nconst createHybrid2 = (word1, word2) => {\n  if (word1.length <= 2 || word2.length <= 2) {\n    return null;\n  }\n\n  const intersection = word1.slice(-2);\n  if (word2.slice(0, 2) === intersection) {\n    return word1.slice(0, -2) + intersection.toUpperCase() + word2.slice(2);\n  }\n\n  return null;\n};\n\nconst createHybrid3 = (word1, word2) => {\n  if (word1.length <= 3 || word2.length <= 3) {\n    return null;\n  }\n\n  const intersection = word1.slice(-3);\n  if (word2.slice(0, 3) === intersection) {\n    return word1.slice(0, -3) + intersection.toUpperCase() + word2.slice(3);\n  }\n\n  return null;\n};\n\nconst createHybrid4 = (word1, word2) => {\n  if (word1.length <= 4 || word2.length <= 4) {\n    return null;\n  }\n\n  const intersection = word1.slice(-4);\n  if (word2.slice(0, 4) === intersection) {\n    return word1.slice(0, -4) + intersection.toUpperCase() + word2.slice(4);\n  }\n\n  return null;\n};\n\nconst createSharada = (word1, word2, dictionarySet) => {\n  const word = word1 + word2;\n  if (dictionarySet.has(word)) {\n    return word;\n  }\n\n  return null;\n};\n\nconst createGolovahvosts = (word1, word2, dictionarySet) => {\n  if (word1.length <= 3 || word2.length <= 3) {\n    return [];\n  }\n\n  const golovahvosts = [];\n  for (let i = word1.length - 1; i >= 3; i--) {\n    const word1Tail = word1.slice(-i);\n\n    for (let j = word2.length - 1; j >= 3; j--) {\n      const word = word1Tail + word2.slice(0, j);\n      if (dictionarySet.has(word)) {\n        golovahvosts.push(\n          word1.slice(0, word1.length - i) + word.toUpperCase() + word2.slice(j - word2.length),\n        );\n      }\n    }\n  }\n\n  return golovahvosts;\n};\n\nconst createEmptyFormats = (selectedFormatsSet) => {\n  return FORMATS_MAP.reduce((result, [format]) => {\n    if (selectedFormatsSet.has(format)) {\n      return {\n        ...result,\n        [format]: [],\n      };\n    }\n\n    return result;\n  }, {});\n};\n\nconst getFormats = (\n  word,\n  words,\n  dictionarySet,\n  selectedFormatsSet,\n  isBidirectional,\n  isIntersection = false,\n) => {\n  const formats = createEmptyFormats(selectedFormatsSet);\n\n  if (word.length > 0) {\n    words.forEach((wordDictionary, i) => {\n      if (wordDictionary === word) {\n        return;\n      }\n\n      const result = isIntersection ? `${word} ${wordDictionary}` : wordDictionary;\n\n      if (formats.zerkala && isZerkalo(word, wordDictionary)) {\n        formats.zerkala.push([result, i]);\n      }\n\n      if (formats.anagrams && isAnagram(word, wordDictionary)) {\n        formats.anagrams.push([result, i]);\n      }\n\n      if (formats.plusograms) {\n        if (isPlusogram(word, wordDictionary)) {\n          formats.plusograms.push([result, i]);\n        } else if (isBidirectional && isPlusogram(wordDictionary, word)) {\n          formats.plusograms.push([result, i + 0.5]);\n        }\n      }\n\n      if (formats.metagrams && isMetagram(word, wordDictionary)) {\n        formats.metagrams.push([result, i]);\n      }\n\n      if (formats.metanagrams) {\n        if (isMetanagram(word, wordDictionary)) {\n          formats.metanagrams.push([result, i]);\n        } else if (isBidirectional && isMetanagram(wordDictionary, word)) {\n          formats.metanagrams.push([result, i + 0.5]);\n        }\n      }\n\n      if (formats.tlenograms) {\n        if (isTlenogram(word, wordDictionary)) {\n          formats.tlenograms.push([result, i]);\n        } else if (isBidirectional && isTlenogram(wordDictionary, word)) {\n          formats.tlenograms.push([result, i + 0.5]);\n        }\n      }\n\n      if (formats.logogrifs) {\n        if (isLogogrif(word, wordDictionary)) {\n          formats.logogrifs.push([result, i]);\n        } else if (isBidirectional && isLogogrif(wordDictionary, word)) {\n          formats.logogrifs.push([result, i + 0.5]);\n        }\n      }\n\n      if (formats.logogrifs2) {\n        if (isLogogrif2(word, wordDictionary)) {\n          formats.logogrifs2.push([result, i]);\n        } else if (isBidirectional && isLogogrif2(wordDictionary, word)) {\n          formats.logogrifs2.push([result, i + 0.5]);\n        }\n      }\n\n      if (formats.logogrifs3) {\n        if (isLogogrif3(word, wordDictionary)) {\n          formats.logogrifs3.push([result, i]);\n        } else if (isBidirectional && isLogogrif3(wordDictionary, word)) {\n          formats.logogrifs3.push([result, i + 0.5]);\n        }\n      }\n\n      if (formats.metagrifs) {\n        if (isMetagrif(word, wordDictionary)) {\n          formats.metagrifs.push([result, i]);\n        } else if (isBidirectional && isMetagrif(wordDictionary, word)) {\n          formats.metagrifs.push([result, i + 0.5]);\n        }\n      }\n\n      if (formats.brukvas) {\n        if (isBrukva(word, wordDictionary)) {\n          formats.brukvas.push([result, i]);\n        } else if (isBidirectional && isBrukva(wordDictionary, word)) {\n          formats.brukvas.push([result, i + 0.5]);\n        }\n      }\n\n      if (formats.tikvas) {\n        if (isTikva(word, wordDictionary)) {\n          formats.tikvas.push([result, i]);\n        } else if (isBidirectional && isTikva(wordDictionary, word)) {\n          formats.tikvas.push([result, i + 0.5]);\n        }\n      }\n\n      if (formats.hybrids2 && isIntersection) {\n        let hybrid2 = createHybrid2(word, wordDictionary);\n        if (hybrid2) {\n          formats.hybrids2.push([hybrid2, i]);\n        }\n\n        if (isBidirectional) {\n          hybrid2 = createHybrid2(wordDictionary, word);\n          if (hybrid2) {\n            formats.hybrids2.push([hybrid2, i + 0.5]);\n          }\n        }\n      }\n\n      if (formats.hybrids3 && isIntersection) {\n        let hybrid3 = createHybrid3(word, wordDictionary);\n        if (hybrid3) {\n          formats.hybrids3.push([hybrid3, i]);\n        }\n\n        if (isBidirectional) {\n          hybrid3 = createHybrid3(wordDictionary, word);\n          if (hybrid3) {\n            formats.hybrids3.push([hybrid3, i + 0.5]);\n          }\n        }\n      }\n\n      if (formats.hybrids4 && isIntersection) {\n        let hybrid4 = createHybrid4(word, wordDictionary);\n        if (hybrid4) {\n          formats.hybrids4.push([hybrid4, i]);\n        }\n\n        if (isBidirectional) {\n          hybrid4 = createHybrid4(wordDictionary, word);\n          if (hybrid4) {\n            formats.hybrids4.push([hybrid4, i + 0.5]);\n          }\n        }\n      }\n\n      if (formats.sharadas) {\n        let sharada = createSharada(word, wordDictionary, dictionarySet);\n        if (sharada) {\n          formats.sharadas.push([sharada, i]);\n        }\n\n        if (isBidirectional) {\n          sharada = createSharada(wordDictionary, word, dictionarySet);\n          if (sharada) {\n            formats.sharadas.push([sharada, i + 0.5]);\n          }\n        }\n      }\n\n      if (formats.golovahvosts && isIntersection) {\n        let golovahvosts = createGolovahvosts(word, wordDictionary, dictionarySet);\n        formats.golovahvosts.push(...golovahvosts.map((golovahvost) => [golovahvost, i]));\n\n        if (isBidirectional) {\n          golovahvosts = createGolovahvosts(wordDictionary, word, dictionarySet);\n          formats.golovahvosts.push(...golovahvosts.map((golovahvost) => [golovahvost, i + 0.5]));\n        }\n      }\n    });\n  }\n\n  return formats;\n};\n\nconst getIntersectionFormats = (\n  words1,\n  words2,\n  dictionarySet,\n  selectedFormatsSet,\n  isBidirectional,\n) => {\n  const formats = words1.reduce((result, word1, i) => {\n    const formats = getFormats(\n      word1,\n      words2,\n      dictionarySet,\n      selectedFormatsSet,\n      isBidirectional,\n      true,\n    );\n\n    Object.keys(result).forEach((format) => {\n      result[format].push(...formats[format].map(([word, weight]) => [word, weight + i]));\n    });\n\n    return result;\n  }, createEmptyFormats(selectedFormatsSet));\n\n  Object.keys(formats).forEach((format) => {\n    formats[format].sort((a, b) => a[1] - b[1]);\n  });\n\n  return formats;\n};\n\nconst App = () => {\n  const [selectedFormatsSet, setSelectedFormatsSet] = useState(new Set());\n  const [isBidirectional, handleIsBidirectionalChange] = useField(true);\n\n  const [word1, handleWord1Change] = useField('');\n  const [word2, handleWord2Change] = useField('');\n\n  const [word1Debounced] = useDebounce(word1, 500);\n  const [word2Debounced] = useDebounce(word2, 500);\n\n  const word1Clean = useMemo(() => word1Debounced.trim().toLowerCase().replace('ё', 'е'), [\n    word1Debounced,\n  ]);\n\n  const word2Clean = useMemo(() => word2Debounced.trim().toLowerCase().replace('ё', 'е'), [\n    word2Debounced,\n  ]);\n\n  const formats = useMemo(() => {\n    if (word2Clean) {\n      const words1 = word1Clean.endsWith('!')\n        ? [word1Clean.slice(0, -1)]\n        : [word1Clean, ...(DATABASE.associations[word1Clean] || [])];\n\n      const words2 = word2Clean.endsWith('!')\n        ? [word2Clean.slice(0, -1)]\n        : [word2Clean, ...(DATABASE.associations[word2Clean] || [])];\n\n      return getIntersectionFormats(\n        words1,\n        words2,\n        DATABASE.dictionary.set,\n        selectedFormatsSet,\n        isBidirectional,\n      );\n    }\n\n    return getFormats(\n      word1Clean,\n      DATABASE.dictionary.array,\n      DATABASE.dictionary.set,\n      selectedFormatsSet,\n      isBidirectional,\n    );\n  }, [selectedFormatsSet, isBidirectional, word1Clean, word2Clean]);\n\n  const handleSelectedFormatChange = useCallback(\n    (_, { value }) => {\n      if (selectedFormatsSet.has(value)) {\n        setSelectedFormatsSet(\n          new Set([...selectedFormatsSet].filter((format) => format !== value)),\n        );\n      } else {\n        setSelectedFormatsSet(new Set([...selectedFormatsSet, value]));\n      }\n    },\n    [selectedFormatsSet],\n  );\n\n  return (\n    <>\n      <div className={styles.header}>\n        <Container>\n          <Grid padded stackable>\n            <Grid.Row>\n              <Grid.Column width={8}>\n                <Form>\n                  <Input\n                    fluid\n                    autoFocus\n                    value={word1}\n                    placeholder=\"Слово\"\n                    size=\"big\"\n                    onChange={handleWord1Change}\n                  />\n                </Form>\n              </Grid.Column>\n              <Grid.Column width={7}>\n                <Form>\n                  <Input\n                    fluid\n                    value={word2}\n                    placeholder=\"Второе слово (пересечение по ассоциатору)\"\n                    size=\"big\"\n                    onChange={handleWord2Change}\n                  />\n                </Form>\n              </Grid.Column>\n              <Grid.Column width={1}>\n                <Modal size=\"mini\" trigger={<Button size=\"big\" icon=\"setting\" />}>\n                  <Header icon=\"setting\" content=\"Настройки\" />\n                  <Modal.Content>\n                    <Form>\n                      <Form.Group grouped>\n                        <label>Форматы</label>\n                        {FORMATS_MAP.map(([format, formatLabel]) => (\n                          <Form.Checkbox\n                            key={format}\n                            value={format}\n                            label={formatLabel}\n                            checked={selectedFormatsSet.has(format)}\n                            onChange={handleSelectedFormatChange}\n                          />\n                        ))}\n                      </Form.Group>\n                      <Form.Group grouped>\n                        <label>Тип связи</label>\n                        <Form.Checkbox\n                          value={!isBidirectional}\n                          label=\"Двунаправленная\"\n                          checked={isBidirectional}\n                          onChange={handleIsBidirectionalChange}\n                        />\n                      </Form.Group>\n                    </Form>\n                  </Modal.Content>\n                </Modal>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n      <div className={styles.content}>\n        <Container>\n          <Grid padded>\n            {FORMATS_MAP.filter(([format]) => formats[format] && formats[format].length > 0).map(\n              ([format, formatLabel]) => (\n                <Grid.Row key={format}>\n                  <Grid.Column>\n                    <Divider horizontal>\n                      <Header as=\"h4\" className={styles.title}>\n                        {formatLabel}\n                      </Header>\n                    </Divider>\n                    <div className={styles.words}>\n                      {formats[format].map(([word], i) => (\n                        <Label\n                          horizontal\n                          key={word}\n                          className={classNames(styles.word, i % 2 && styles.odd)}\n                        >\n                          {word}\n                        </Label>\n                      ))}\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n              ),\n            )}\n          </Grid>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default withAuth(App);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"content\":\"App_content__3La4L\",\"title\":\"App_title__-GfWs\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"odd\":\"App_odd__2GTiD\"};"],"sourceRoot":""}