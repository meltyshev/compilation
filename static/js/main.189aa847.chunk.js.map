{"version":3,"sources":["with-auth.jsx","use-field.js","App.jsx","index.js","App.module.css"],"names":["WrappedComponent","initialValue","useState","value","setValue","useCallback","nextValue","target","DICTIONARY_TYPES","isPlusogram","word1","word2","length","word1Sorted","split","sort","join","word2Sorted","hasDifference","i","charAt","isMetanagram","replace","isLogogrif","isLogogrif2","totalDifferences","isMetagrif","isBrukva","createSharada","dictionarySet","word","has","withAuth","dictionary","setDictionary","useField","handleWordChange","dictionaryType","handleDictionaryTypeChange","useDebounce","wordClean","trim","toLowerCase","useMemo","anagrams","plusograms","metagrams","metanagrams","logogrifs","logogrifs2","metagrifs","brukvas","sharadas","array","forEach","wordDictionary","push","isMetagram","sharada","set","getFormats","useEffect","a","async","sanstv","sociation","Set","Container","Grid","padded","Row","Column","Form","Input","fluid","autoFocus","placeholder","action","Button","Group","size","className","styles","buttons","map","content","key","active","onClick","onChange","Divider","horizontal","Header","as","title","words","anagram","Label","classNames","odd","plusogram","metagram","metanagram","logogrif","logogrif2","metagrif","brukva","Loader","window","location","hostname","URLSearchParams","search","get","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.189aa847.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = 'vhLV5t';\n\nexport default WrappedComponent => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      return window.location.hostname === HOSTNAME\n        && new URLSearchParams(window.location.search).get('token') === TOKEN;\n    }, []);\n\n    if (!isAuthenticated) {\n      return 'Unauthorized';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback(({ target: { value: nextValue } }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport {\n  Button, Container, Divider, Form, Grid, Header, Input, Label, Loader,\n} from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst DICTIONARY_TYPES = [\n  ['sanstv', 'sanstv.ru'],\n  ['sociation', 'sociation.org'],\n];\n\nconst isAnagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  return word1Sorted === word2Sorted;\n}\n\nconst isPlusogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  let hasDifference = false;\n  for (let i = 0; i < word2Sorted.length; i++) {\n    if (word1Sorted.charAt(i - +hasDifference) !== word2Sorted.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word1.length; i++) {\n    if (word1.charAt(i) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetanagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 1;\n}\n\nconst isLogogrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +hasDifference) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isLogogrif2 = (word1, word2) => {\n  if (word2.length - word1.length !== 2) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isMetagrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) !== word2.charAt(i)) {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isBrukva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst createSharada = (word1, word2, dictionarySet) => {\n  const word = word1 + word2;\n  if (dictionarySet.has(word)) {\n    return word;\n  }\n\n  return null;\n}\n\nconst getFormats = (word, dictionary) => {\n  const anagrams = [];\n  const plusograms = [];\n  const metagrams = [];\n  const metanagrams = [];\n  const logogrifs = [];\n  const logogrifs2 = [];\n  const metagrifs = [];\n  const brukvas = [];\n  const sharadas = [];\n\n  if (word.length > 0) {\n    dictionary.array.forEach((wordDictionary) => {\n      if (wordDictionary === word) {\n        return;\n      }\n\n      if (isAnagram(word, wordDictionary)) {\n        anagrams.push(wordDictionary);\n      }\n\n      if (isPlusogram(word, wordDictionary) || isPlusogram(wordDictionary, word)) {\n        plusograms.push(wordDictionary);\n      }\n\n      if (isMetagram(word, wordDictionary)) {\n        metagrams.push(wordDictionary);\n      }\n\n      if (isMetanagram(word, wordDictionary) || isMetanagram(wordDictionary, word)) {\n        metanagrams.push(wordDictionary);\n      }\n\n      if (isLogogrif(word, wordDictionary) || isLogogrif(wordDictionary, word)) {\n        logogrifs.push(wordDictionary);\n      }\n\n      if (isLogogrif2(word, wordDictionary) || isLogogrif2(wordDictionary, word)) {\n        logogrifs2.push(wordDictionary);\n      }\n\n      if (isMetagrif(word, wordDictionary) || isMetagrif(wordDictionary, word)) {\n        metagrifs.push(wordDictionary);\n      }\n\n      if (isBrukva(word, wordDictionary) || isBrukva(wordDictionary, word)) {\n        brukvas.push(wordDictionary);\n      }\n\n      let sharada = createSharada(word, wordDictionary, dictionary.set);\n      if (sharada) {\n        sharadas.push(sharada);\n      }\n\n      sharada = createSharada(wordDictionary, word, dictionary.set);\n      if (sharada) {\n        sharadas.push(sharada);\n      }\n    });\n  }\n\n  return {\n    anagrams,\n    plusograms,\n    metagrams,\n    metanagrams,\n    logogrifs,\n    logogrifs2,\n    metagrifs,\n    brukvas,\n    sharadas,\n  };\n}\n\nconst App = () => {\n  const [dictionary, setDictionary] = useState(null);\n  const [word, handleWordChange] = useField('');\n  const [dictionaryType, handleDictionaryTypeChange] = useField('sanstv');\n  const [wordDebounced] = useDebounce(word, 500);\n\n  const wordClean = wordDebounced.trim().toLowerCase().replace('ё', 'е');\n\n  const {\n    anagrams,\n    plusograms,\n    metagrams,\n    metanagrams,\n    logogrifs,\n    logogrifs2,\n    metagrifs,\n    brukvas,\n    sharadas,\n  } = useMemo(() => {\n    if (!dictionary) {\n      return {};\n    }\n\n    return getFormats(wordClean, dictionary[dictionaryType]);\n  }, [dictionary, dictionaryType, wordClean]);\n\n  useEffect(() => {\n    (async () => {\n      const { sanstv, sociation } = await import('./dictionary.json');\n\n      setDictionary({\n        sanstv: {\n          array: sanstv,\n          set: new Set(sanstv),\n        },\n        sociation: {\n          array: sociation,\n          set: new Set(sociation),\n        },\n      });\n    })();\n  }, []);\n\n  if (!dictionary) {\n    return <Loader active>Загружаю базу...</Loader>;\n  }\n\n  return (\n    <Container>\n      <Grid padded>\n        <Grid.Row>\n          <Grid.Column>\n            <Form>\n              <Input\n                fluid\n                autoFocus\n                value={word}\n                placeholder=\"Слово\"\n                action={\n                  <Button.Group size=\"big\" className={styles.buttons}>\n                    {DICTIONARY_TYPES.map(([value, content]) => (\n                      <Button\n                        key={value}\n                        value={value}\n                        content={content}\n                        active={value === dictionaryType}\n                        onClick={handleDictionaryTypeChange}\n                      />\n                    ))}\n                  </Button.Group>\n                }\n                size=\"big\"\n                onChange={handleWordChange}\n              />\n            </Form>\n          </Grid.Column>\n        </Grid.Row>\n        {anagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Анаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {anagrams.map((anagram, i) => (\n                  <Label\n                    horizontal\n                    key={anagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {anagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {plusograms.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Плюсограммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {plusograms.map((plusogram, i) => (\n                  <Label\n                    horizontal\n                    key={plusogram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {plusogram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metagrams.map((metagram, i) => (\n                  <Label\n                    horizontal\n                    key={metagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metanagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метанаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metanagrams.map((metanagram, i) => (\n                  <Label\n                    horizontal\n                    key={metanagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metanagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {logogrifs.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Логогрифы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {logogrifs.map((logogrif, i) => (\n                  <Label\n                    horizontal\n                    key={logogrif}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {logogrif}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {logogrifs2.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Логогрифы +2</Header>\n              </Divider>\n              <div className={styles.words}>\n                {logogrifs2.map((logogrif2, i) => (\n                  <Label\n                    horizontal\n                    key={logogrif2}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {logogrif2}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metagrifs.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метагрифы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metagrifs.map((metagrif, i) => (\n                  <Label\n                    horizontal\n                    key={metagrif}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metagrif}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {brukvas.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Брюквы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {brukvas.map((brukva, i) => (\n                  <Label\n                    horizontal\n                    key={brukva}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {brukva}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {sharadas.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Шарады</Header>\n              </Divider>\n              <div className={styles.words}>\n                {sharadas.map((sharada, i) => (\n                  <Label\n                    horizontal\n                    key={sharada}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {sharada}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default withAuth(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"App_buttons__32eX7\",\"title\":\"App_title__-GfWs\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"odd\":\"App_odd__2GTiD\"};"],"sourceRoot":""}