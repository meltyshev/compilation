{"version":3,"sources":["App.module.css","with-auth.jsx","use-field.js","App.jsx","index.js"],"names":["module","exports","WrappedComponent","initialValue","useState","value","setValue","useCallback","nextValue","target","DICTIONARY_TYPES","isPlusogram","word1","word2","length","word1Sorted","split","sort","join","word2Sorted","hasDifference","i","charAt","isMetanagram","replace","isLogogrif","isLogogrif2","totalDifferences","isMetagrif","isBrukva","withAuth","dictionary","setDictionary","useField","word","handleWordChange","dictionaryType","handleDictionaryTypeChange","useDebounce","wordDebounced","useEffect","a","async","sanstv","sociation","Loader","active","wordClean","trim","toLowerCase","anagrams","plusograms","metagrams","metanagrams","logogrifs","logogrifs2","metagrifs","brukvas","forEach","wordDictionary","push","isMetagram","Container","Grid","padded","Row","Column","width","Form","Input","fluid","placeholder","size","onChange","Button","Group","map","content","key","onClick","Divider","horizontal","Header","as","className","styles","title","words","anagram","Label","classNames","odd","plusogram","metagram","metanagram","logogrif","logogrif2","metagrif","brukva","useMemo","window","location","hostname","URLSearchParams","search","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4677de48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__-GfWs\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"odd\":\"App_odd__2GTiD\"};","import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = 'vhLV5t';\n\nexport default WrappedComponent => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      return window.location.hostname === HOSTNAME\n        && new URLSearchParams(window.location.search).get('token') === TOKEN;\n    }, []);\n\n    if (!isAuthenticated) {\n      return 'Unauthorized';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback(({ target: { value: nextValue } }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport {\n  Button, Container, Divider, Form, Grid, Header, Input, Label, Loader,\n} from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst DICTIONARY_TYPES = [\n  ['sanstv', 'sanstv.ru'],\n  ['sociation', 'sociation.org'],\n];\n\nconst isAnagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  return word1Sorted === word2Sorted;\n}\n\nconst isPlusogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  let hasDifference = false;\n  for (let i = 0; i < word2Sorted.length; i++) {\n    if (word1Sorted.charAt(i - +hasDifference) !== word2Sorted.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word1.length; i++) {\n    if (word1.charAt(i) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetanagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 1;\n}\n\nconst isLogogrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +hasDifference) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isLogogrif2 = (word1, word2) => {\n  if (word2.length - word1.length !== 2) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isMetagrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) !== word2.charAt(i)) {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isBrukva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst App = () => {\n  const [dictionary, setDictionary] = useState(null);\n  const [word, handleWordChange] = useField('');\n  const [dictionaryType, handleDictionaryTypeChange] = useField('sanstv');\n  const [wordDebounced] = useDebounce(word, 500);\n\n  useEffect(() => {\n    (async () => {\n      const { sanstv, sociation } = await import('./dictionary.json');\n\n      setDictionary({\n        sanstv,\n        sociation,\n      });\n    })();\n  }, []);\n\n  if (!dictionary) {\n    return <Loader active>Загружаю базу...</Loader>;\n  }\n\n  const wordClean = wordDebounced.trim().toLowerCase().replace('ё', 'е');\n\n  const anagrams = [];\n  const plusograms = [];\n  const metagrams = [];\n  const metanagrams = [];\n  const logogrifs = [];\n  const logogrifs2 = [];\n  const metagrifs = [];\n  const brukvas = [];\n\n  if (wordClean.length > 0) {\n    dictionary[dictionaryType].forEach((wordDictionary) => {\n      if (wordDictionary === wordClean) {\n        return;\n      }\n\n      if (isAnagram(wordClean, wordDictionary)) {\n        anagrams.push(wordDictionary);\n      }\n\n      if (isPlusogram(wordClean, wordDictionary) || isPlusogram(wordDictionary, wordClean)) {\n        plusograms.push(wordDictionary);\n      }\n\n      if (isMetagram(wordClean, wordDictionary)) {\n        metagrams.push(wordDictionary);\n      }\n\n      if (isMetanagram(wordClean, wordDictionary) || isMetanagram(wordDictionary, wordClean)) {\n        metanagrams.push(wordDictionary);\n      }\n\n      if (isLogogrif(wordClean, wordDictionary) || isLogogrif(wordDictionary, wordClean)) {\n        logogrifs.push(wordDictionary);\n      }\n\n      if (isLogogrif2(wordClean, wordDictionary) || isLogogrif2(wordDictionary, wordClean)) {\n        logogrifs2.push(wordDictionary);\n      }\n\n      if (isMetagrif(wordClean, wordDictionary) || isMetagrif(wordDictionary, wordClean)) {\n        metagrifs.push(wordDictionary);\n      }\n\n      if (isBrukva(wordClean, wordDictionary) || isBrukva(wordDictionary, wordClean)) {\n        brukvas.push(wordDictionary);\n      }\n    });\n  }\n\n  return (\n    <Container>\n      <Grid padded>\n        <Grid.Row>\n          <Grid.Column width={12}>\n            <Form>\n              <Input\n                fluid\n                value={word}\n                placeholder=\"Слово\"\n                size=\"big\"\n                onChange={handleWordChange}\n              />\n            </Form>\n          </Grid.Column>\n          <Grid.Column width={4}>\n            <Button.Group size=\"big\">\n              {DICTIONARY_TYPES.map(([value, content]) => (\n                <Button\n                  key={value}\n                  value={value}\n                  content={content}\n                  active={value === dictionaryType}\n                  onClick={handleDictionaryTypeChange}\n                />\n              ))}\n            </Button.Group>\n          </Grid.Column>\n        </Grid.Row>\n        {anagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Анаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {anagrams.map((anagram, i) => (\n                  <Label\n                    horizontal\n                    key={anagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {anagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {plusograms.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Плюсограммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {plusograms.map((plusogram, i) => (\n                  <Label\n                    horizontal\n                    key={plusogram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {plusogram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metagrams.map((metagram, i) => (\n                  <Label\n                    horizontal\n                    key={metagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metanagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метанаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metanagrams.map((metanagram, i) => (\n                  <Label\n                    horizontal\n                    key={metanagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metanagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {logogrifs.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Логогрифы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {logogrifs.map((logogrif, i) => (\n                  <Label\n                    horizontal\n                    key={logogrif}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {logogrif}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {logogrifs2.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Логогрифы +2</Header>\n              </Divider>\n              <div className={styles.words}>\n                {logogrifs2.map((logogrif2, i) => (\n                  <Label\n                    horizontal\n                    key={logogrif2}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {logogrif2}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metagrifs.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метагрифы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metagrifs.map((metagrif, i) => (\n                  <Label\n                    horizontal\n                    key={metagrif}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metagrif}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {brukvas.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Брюквы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {brukvas.map((brukva, i) => (\n                  <Label\n                    horizontal\n                    key={brukva}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {brukva}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default withAuth(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}