{"version":3,"sources":["with-auth.jsx","use-field.js","App.jsx","index.js","App.module.css"],"names":["WrappedComponent","initialValue","useState","value","setValue","useCallback","_","nextValue","FORMATS_MAP","DICTIONARIES_MAP","isPlusogram","word1","word2","length","word1Sorted","split","sort","join","word2Sorted","hasDifference","i","charAt","isMetanagram","replace","isLogogrif","isLogogrif2","totalDifferences","isMetagrif","isBrukva","createSharada","dictionarySet","word","has","withAuth","dictionary","setDictionary","Set","map","selectedFormatsSet","setSelectedFormatsSet","useField","selectedDictionary","handleSelectedDictionaryChange","handleWordChange","useDebounce","wordDebounced","wordClean","useMemo","trim","toLowerCase","formats","reduce","result","format","array","forEach","wordDictionary","anagrams","push","plusograms","metagrams","isMetagram","metanagrams","logogrifs","logogrifs2","metagrifs","brukvas","sharadas","sharada","set","getFormats","handleSelectedFormatChange","filter","useEffect","a","async","sanstv","sociation","className","styles","header","Container","Grid","padded","Row","Column","Form","Input","fluid","autoFocus","placeholder","size","action","Modal","trigger","Button","icon","Header","content","Content","Group","grouped","formatLabel","Checkbox","key","label","checked","onChange","dictionaryLabel","Radio","Divider","horizontal","as","title","words","Label","classNames","odd","Loader","active","window","location","hostname","URLSearchParams","search","get","ReactDOM","render","document","getElementById","module","exports"],"mappings":"6JAKeA,E,uMCHA,WAACC,GAAkB,IAAD,EACLC,mBAASD,GADJ,mBACxBE,EADwB,KACjBC,EADiB,KAO/B,MAAO,CAACD,EAJaE,uBAAY,SAACC,EAAD,GAA8B,IAAjBC,EAAgB,EAAvBJ,MACrCC,EAASG,KACR,IAE0BH,I,iBCKzBI,G,OAAc,CAClB,CAAC,WAAY,0DACb,CAAC,aAAc,sEACf,CAAC,YAAa,gEACd,CAAC,cAAe,4EAChB,CAAC,YAAa,0DACd,CAAC,aAAc,6DACf,CAAC,YAAa,0DACd,CAAC,UAAW,wCACZ,CAAC,WAAY,0CAGTC,EAAmB,CACvB,CAAC,SAAU,aACX,CAAC,YAAa,kBAcVC,EAAc,SAACC,EAAOC,GAC1B,GAAIA,EAAMC,OAASF,EAAME,SAAW,EAClC,OAAO,EAOT,IAJA,IAAMC,EAAcH,EAAMI,MAAM,IAAIC,OAAOC,KAAK,IAC1CC,EAAcN,EAAMG,MAAM,IAAIC,OAAOC,KAAK,IAE5CE,GAAgB,EACXC,EAAI,EAAGA,EAAIF,EAAYL,OAAQO,IACtC,GAAIN,EAAYO,OAAOD,GAAKD,KAAmBD,EAAYG,OAAOD,GAAI,CACpE,GAAID,EACF,OAAO,EAGTA,GAAgB,EAIpB,OAAOA,GAsBHG,EAAe,SAACX,EAAOC,GAC3B,GAAID,EAAME,SAAWD,EAAMC,OACzB,OAAO,EAGT,IAAK,IAAIO,EAAI,EAAGA,EAAIT,EAAME,OAAQO,IAChCR,EAAQA,EAAMW,QAAQZ,EAAMU,OAAOD,GAAI,IAGzC,OAAwB,IAAjBR,EAAMC,QAGTW,EAAa,SAACb,EAAOC,GACzB,GAAIA,EAAMC,OAASF,EAAME,SAAW,EAClC,OAAO,EAIT,IADA,IAAIM,GAAgB,EACXC,EAAI,EAAGA,EAAIR,EAAMC,OAAQO,IAChC,GAAIT,EAAMU,OAAOD,GAAKD,KAAmBP,EAAMS,OAAOD,GAAI,CACxD,GAAID,EACF,OAAO,EAGTA,GAAgB,EAIpB,OAAOA,GAGHM,EAAc,SAACd,EAAOC,GAC1B,GAAIA,EAAMC,OAASF,EAAME,SAAW,EAClC,OAAO,EAIT,IADA,IAAIa,EAAmB,EACdN,EAAI,EAAGA,EAAIR,EAAMC,OAAQO,IAChC,GAAIT,EAAMU,OAAOD,EAAIM,KAAsBd,EAAMS,OAAOD,IACtD,GAAyB,IAArBM,EACF,OAAO,MAEJ,CACL,GAAyB,IAArBA,EACF,OAAO,EAGTA,IAIJ,OAA4B,IAArBA,GAGHC,EAAa,SAAChB,EAAOC,GACzB,GAAIA,EAAMC,OAASF,EAAME,SAAW,EAClC,OAAO,EAIT,IADA,IAAIa,EAAmB,EACdN,EAAI,EAAGA,EAAIR,EAAMC,UACpBF,EAAMU,OAAOD,KAAOM,KAAsBd,EAAMS,OAAOD,MACzDM,EAEuB,GAJON,KAUlC,GAAyB,IAArBM,EACF,OAAO,EAGTA,EAAmB,EACnB,IAAK,IAAIN,EAAI,EAAGA,EAAIR,EAAMC,OAAQO,IAChC,GAAIT,EAAMU,OAAOD,IAA2B,IAArBM,MAA6Bd,EAAMS,OAAOD,GAAI,CACnE,GAAyB,IAArBM,EACF,OAAO,EAGTA,IAIJ,OAA4B,IAArBA,GAGHE,EAAW,SAACjB,EAAOC,GACvB,GAAIA,EAAMC,OAASF,EAAME,SAAW,EAClC,OAAO,EAIT,IADA,IAAIa,EAAmB,EACdN,EAAI,EAAGA,EAAIR,EAAMC,OAAQO,IAChC,GAAIT,EAAMU,OAAOD,KAAOM,KAAsBd,EAAMS,OAAOD,IACzD,GAAyB,IAArBM,EACF,OAAO,MAEJ,CACL,GAAyB,IAArBA,EACF,OAAO,EAGTA,IAIJ,OAA4B,IAArBA,GAGHG,EAAgB,SAAClB,EAAOC,EAAOkB,GACnC,IAAMC,EAAOpB,EAAQC,EACrB,OAAIkB,EAAcE,IAAID,GACbA,EAGF,MAqOME,GFxaAjC,EE2RH,WAAO,IAAD,EACoBE,mBAAS,MAD7B,mBACTgC,EADS,KACGC,EADH,OAGoCjC,mBAClD,IAAIkC,IAAI5B,EAAY6B,KAAI,4CAJV,mBAGTC,EAHS,KAGWC,EAHX,OAO6CC,EAAS,UAPtD,mBAOTC,EAPS,KAOWC,EAPX,OAQiBF,EAAS,IAR1B,mBAQTT,EARS,KAQHY,EARG,OASQC,YAAYb,EAAM,KAAnCc,EATS,oBAWVC,EAAYC,mBAAQ,kBAAMF,EAAcG,OAAOC,cAAc1B,QAAQ,SAAK,YAAM,CACpFsB,IAGIK,EAAUH,mBAAQ,WACtB,OAAKb,EArGU,SAACH,EAAMG,EAAYI,GACpC,IAAMY,EAAU1C,EAAY2C,QAAO,SAACC,EAAD,GAAuB,IAAbC,EAAY,oBACvD,OAAIf,EAAmBN,IAAIqB,GAClB,eACFD,EADL,eAEGC,EAAS,KAIPD,IACN,IAwEH,OAtEIrB,EAAKlB,OAAS,GAChBqB,EAAWoB,MAAMC,SAAQ,SAACC,GAzLZ,IAAC7C,EAAOC,EA0LpB,GAAI4C,IAAmBzB,IAInBmB,EAAQO,WA9LQ7C,EA8LoB4C,GA9L3B7C,EA8LqBoB,GA7L5BlB,SAAWD,EAAMC,QAIPF,EAAMI,MAAM,IAAIC,OAAOC,KAAK,MAC5BL,EAAMG,MAAM,IAAIC,OAAOC,KAAK,MAyL1CiC,EAAQO,SAASC,KAAKF,GAItBN,EAAQS,aACPjD,EAAYqB,EAAMyB,IAAmB9C,EAAY8C,EAAgBzB,KAElEmB,EAAQS,WAAWD,KAAKF,GAGtBN,EAAQU,WAxKC,SAACjD,EAAOC,GACzB,GAAID,EAAME,SAAWD,EAAMC,OACzB,OAAO,EAIT,IADA,IAAIM,GAAgB,EACXC,EAAI,EAAGA,EAAIT,EAAME,OAAQO,IAChC,GAAIT,EAAMU,OAAOD,KAAOR,EAAMS,OAAOD,GAAI,CACvC,GAAID,EACF,OAAO,EAGTA,GAAgB,EAIpB,OAAOA,EAwJsB0C,CAAW9B,EAAMyB,IACxCN,EAAQU,UAAUF,KAAKF,GAIvBN,EAAQY,cACPxC,EAAaS,EAAMyB,IAAmBlC,EAAakC,EAAgBzB,KAEpEmB,EAAQY,YAAYJ,KAAKF,GAIzBN,EAAQa,YACPvC,EAAWO,EAAMyB,IAAmBhC,EAAWgC,EAAgBzB,KAEhEmB,EAAQa,UAAUL,KAAKF,GAIvBN,EAAQc,aACPvC,EAAYM,EAAMyB,IAAmB/B,EAAY+B,EAAgBzB,KAElEmB,EAAQc,WAAWN,KAAKF,GAIxBN,EAAQe,YACPtC,EAAWI,EAAMyB,IAAmB7B,EAAW6B,EAAgBzB,KAEhEmB,EAAQe,UAAUP,KAAKF,GAIvBN,EAAQgB,UACPtC,EAASG,EAAMyB,IAAmB5B,EAAS4B,EAAgBzB,KAE5DmB,EAAQgB,QAAQR,KAAKF,GAGnBN,EAAQiB,UAAU,CACpB,IAAIC,EAAUvC,EAAcE,EAAMyB,EAAgBtB,EAAWmC,KACzDD,GACFlB,EAAQiB,SAAST,KAAKU,IAGxBA,EAAUvC,EAAc2B,EAAgBzB,EAAMG,EAAWmC,OAEvDnB,EAAQiB,SAAST,KAAKU,OAMvBlB,EAuBEoB,CAAWxB,EAAWZ,EAAWO,GAAqBH,GAHpD,KAIR,CAACJ,EAAYI,EAAoBG,EAAoBK,IAElDyB,EAA6BlE,uBAAY,SAACC,EAAD,GAAmB,IAAbH,EAAY,EAAZA,MAC/CmC,EAAmBN,IAAI7B,GACzBoC,EAAsB,IAAIH,IAAI,YAAIE,GAAoBkC,QAAO,SAAAnB,GAAM,OAAIA,IAAWlD,OAElFoC,EAAsB,IAAIH,IAAJ,sBAAYE,GAAZ,CAAgCnC,QAEvD,CAACmC,IAmBJ,OAjBAmC,qBAAU,YACR,WAAC,YAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACqC,mCADrC,gBACSE,EADT,EACSA,OAAQC,EADjB,EACiBA,UAEhB1C,EAAc,CACZyC,OAAQ,CACNtB,MAAOsB,EACPP,IAAK,IAAIjC,IAAIwC,IAEfC,UAAW,CACTvB,MAAOuB,EACPR,IAAK,IAAIjC,IAAIyC,MAVlB,qCAAD,KAcC,IAEE3C,EAKH,oCACE,yBAAK4C,UAAWC,IAAOC,QACrB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACD,EAAA,EAAKE,IAAN,KACE,kBAACF,EAAA,EAAKG,OAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,OAAK,EACLC,WAAS,EACTtF,MAAO4B,EACP2D,YAAY,iCACZC,KAAK,MACLC,OACE,kBAACC,EAAA,EAAD,CAAOF,KAAK,OAAOG,QAAS,kBAACC,EAAA,EAAD,CAAQC,KAAK,aACvC,kBAACC,EAAA,EAAD,CAAQD,KAAK,UAAUE,QAAQ,2DAC/B,kBAACL,EAAA,EAAMM,QAAP,KACE,kBAACb,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKc,MAAN,CAAYC,SAAO,GACjB,6EACC7F,EAAY6B,KAAI,mCAAEgB,EAAF,KAAUiD,EAAV,YACf,kBAAChB,EAAA,EAAKiB,SAAN,CACEC,IAAKnD,EACLlD,MAAOkD,EACPoD,MAAOH,EACPI,QAASpE,EAAmBN,IAAIqB,GAChCsD,SAAUpC,QAIhB,kBAACe,EAAA,EAAKc,MAAN,CAAYC,SAAO,GACjB,6EACC5F,EAAiB4B,KAAI,mCAAEH,EAAF,KAAc0E,EAAd,YACpB,kBAACtB,EAAA,EAAKuB,MAAN,CACEL,IAAKtE,EACL/B,MAAO+B,EACPuE,MAAOG,EACPF,QAASxE,IAAeO,EACxBkE,SAAUjE,WAQxBiE,SAAUhE,UAQxB,yBAAKmC,UAAWC,IAAOmB,SACrB,kBAACjB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACT3E,EAAYgE,QAAO,gBAAEnB,EAAF,2BAAcH,EAAQG,IAAWH,EAAQG,GAAQxC,OAAS,KAAGwB,KAC/E,mCAAEgB,EAAF,KAAUiD,EAAV,YACE,kBAACpB,EAAA,EAAKE,IAAN,CAAUoB,IAAKnD,GACb,kBAAC6B,EAAA,EAAKG,OAAN,KACE,kBAACyB,EAAA,EAAD,CAASC,YAAU,GACjB,kBAACd,EAAA,EAAD,CAAQe,GAAG,KAAKlC,UAAWC,IAAOkC,OAC/BX,IAGL,yBAAKxB,UAAWC,IAAOmC,OACpBhE,EAAQG,GAAQhB,KAAI,SAACN,EAAMX,GAAP,OACnB,kBAAC+F,EAAA,EAAD,CACEJ,YAAU,EACVP,IAAKzE,EACL+C,UAAWsC,IAAWrC,IAAOhD,KAAMX,EAAI,GAAK2D,IAAOsC,MAElDtF,gBA7EhB,kBAACuF,EAAA,EAAD,CAAQC,QAAM,GAAd,iFF3UI,WAUX,OATwBxE,mBAAQ,WAK9B,MAVW,wBAUJyE,OAAOC,SAASC,UATf,WAUH,IAAIC,gBAAgBH,OAAOC,SAASG,QAAQC,IAAI,WACpD,IAMI,kBAAC7H,EAAD,MAHE,iBGZb8H,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,mBCJjDC,EAAOC,QAAU,CAAC,OAAS,oBAAoB,QAAU,qBAAqB,MAAQ,mBAAmB,MAAQ,mBAAmB,KAAO,kBAAkB,IAAM,oB","file":"static/js/main.e1505609.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = 'vhLV5t';\n\nexport default WrappedComponent => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      return window.location.hostname === HOSTNAME\n        && new URLSearchParams(window.location.search).get('token') === TOKEN;\n    }, []);\n\n    if (!isAuthenticated) {\n      return 'Unauthorized';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback((_, { value: nextValue }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport {\n  Button, Container, Divider, Form, Grid, Header, Input, Label, Loader, Modal,\n} from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst FORMATS_MAP = [\n  ['anagrams', 'Анаграммы'],\n  ['plusograms', 'Плюсограммы'],\n  ['metagrams', 'Метаграммы'],\n  ['metanagrams', 'Метанаграммы'],\n  ['logogrifs', 'Логогрифы'],\n  ['logogrifs2', 'Логогрифы +2'],\n  ['metagrifs', 'Метагрифы'],\n  ['brukvas', 'Брюквы'],\n  ['sharadas', 'Шарады'],\n];\n\nconst DICTIONARIES_MAP = [\n  ['sanstv', 'sanstv.ru'],\n  ['sociation', 'sociation.org'],\n];\n\nconst isAnagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  return word1Sorted === word2Sorted;\n}\n\nconst isPlusogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  let hasDifference = false;\n  for (let i = 0; i < word2Sorted.length; i++) {\n    if (word1Sorted.charAt(i - +hasDifference) !== word2Sorted.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word1.length; i++) {\n    if (word1.charAt(i) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetanagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 1;\n}\n\nconst isLogogrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +hasDifference) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isLogogrif2 = (word1, word2) => {\n  if (word2.length - word1.length !== 2) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isMetagrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) !== word2.charAt(i)) {\n      totalDifferences++;\n\n      if (totalDifferences > 2) {\n        break;\n      }\n    }\n  }\n\n  if (totalDifferences === 2) {\n    return true;\n  }\n\n  totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +(totalDifferences === 2)) !== word2.charAt(i)) {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isBrukva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst createSharada = (word1, word2, dictionarySet) => {\n  const word = word1 + word2;\n  if (dictionarySet.has(word)) {\n    return word;\n  }\n\n  return null;\n}\n\nconst getFormats = (word, dictionary, selectedFormatsSet) => {\n  const formats = FORMATS_MAP.reduce((result, [format]) => {\n    if (selectedFormatsSet.has(format)) {\n      return {\n        ...result,\n        [format]: [],\n      }\n    }\n\n    return result;\n  }, {});\n\n  if (word.length > 0) {\n    dictionary.array.forEach((wordDictionary) => {\n      if (wordDictionary === word) {\n        return;\n      }\n\n      if (formats.anagrams && isAnagram(word, wordDictionary)) {\n        formats.anagrams.push(wordDictionary);\n      }\n\n      if (\n        formats.plusograms &&\n        (isPlusogram(word, wordDictionary) || isPlusogram(wordDictionary, word))\n      ) {\n        formats.plusograms.push(wordDictionary);\n      }\n\n      if (formats.metagrams && isMetagram(word, wordDictionary)) {\n        formats.metagrams.push(wordDictionary);\n      }\n\n      if (\n        formats.metanagrams &&\n        (isMetanagram(word, wordDictionary) || isMetanagram(wordDictionary, word))\n      ) {\n        formats.metanagrams.push(wordDictionary);\n      }\n\n      if (\n        formats.logogrifs &&\n        (isLogogrif(word, wordDictionary) || isLogogrif(wordDictionary, word))\n      ) {\n        formats.logogrifs.push(wordDictionary);\n      }\n\n      if (\n        formats.logogrifs2 &&\n        (isLogogrif2(word, wordDictionary) || isLogogrif2(wordDictionary, word))\n      ) {\n        formats.logogrifs2.push(wordDictionary);\n      }\n\n      if (\n        formats.metagrifs &&\n        (isMetagrif(word, wordDictionary) || isMetagrif(wordDictionary, word))\n      ) {\n        formats.metagrifs.push(wordDictionary);\n      }\n\n      if (\n        formats.brukvas &&\n        (isBrukva(word, wordDictionary) || isBrukva(wordDictionary, word))\n      ) {\n        formats.brukvas.push(wordDictionary);\n      }\n\n      if (formats.sharadas) {\n        let sharada = createSharada(word, wordDictionary, dictionary.set);\n        if (sharada) {\n          formats.sharadas.push(sharada);\n        }\n\n        sharada = createSharada(wordDictionary, word, dictionary.set);\n        if (sharada) {\n          formats.sharadas.push(sharada);\n        }\n      }\n    });\n  }\n\n  return formats;\n}\n\nconst App = () => {\n  const [dictionary, setDictionary] = useState(null);\n\n  const [selectedFormatsSet, setSelectedFormatsSet] = useState(\n    new Set(FORMATS_MAP.map(([format]) => format)),\n  );\n\n  const [selectedDictionary, handleSelectedDictionaryChange] = useField('sanstv');\n  const [word, handleWordChange] = useField('');\n  const [wordDebounced] = useDebounce(word, 500);\n\n  const wordClean = useMemo(() => wordDebounced.trim().toLowerCase().replace('ё', 'е'), [\n    wordDebounced,\n  ]);\n\n  const formats = useMemo(() => {\n    if (!dictionary) {\n      return {};\n    }\n\n    return getFormats(wordClean, dictionary[selectedDictionary], selectedFormatsSet);\n  }, [dictionary, selectedFormatsSet, selectedDictionary, wordClean]);\n\n  const handleSelectedFormatChange = useCallback((_, { value }) => {\n    if (selectedFormatsSet.has(value)) {\n      setSelectedFormatsSet(new Set([...selectedFormatsSet].filter(format => format !== value)));\n    } else {\n      setSelectedFormatsSet(new Set([...selectedFormatsSet, value]));\n    }\n  }, [selectedFormatsSet]);\n\n  useEffect(() => {\n    (async () => {\n      const { sanstv, sociation } = await import('./dictionary.json');\n\n      setDictionary({\n        sanstv: {\n          array: sanstv,\n          set: new Set(sanstv),\n        },\n        sociation: {\n          array: sociation,\n          set: new Set(sociation),\n        },\n      });\n    })();\n  }, []);\n\n  if (!dictionary) {\n    return <Loader active>Загружаю базу...</Loader>;\n  }\n\n  return (\n    <>\n      <div className={styles.header}>\n        <Container>\n          <Grid padded>\n            <Grid.Row>\n              <Grid.Column>\n                <Form>\n                  <Input\n                    fluid\n                    autoFocus\n                    value={word}\n                    placeholder=\"Слово\"\n                    size=\"big\"\n                    action={\n                      <Modal size=\"mini\" trigger={<Button icon=\"setting\" />}>\n                        <Header icon=\"setting\" content=\"Настройки\" />\n                        <Modal.Content>\n                          <Form>\n                            <Form.Group grouped>\n                              <label>Форматы</label>\n                              {FORMATS_MAP.map(([format, formatLabel]) => (\n                                <Form.Checkbox\n                                  key={format}\n                                  value={format}\n                                  label={formatLabel}\n                                  checked={selectedFormatsSet.has(format)}\n                                  onChange={handleSelectedFormatChange}\n                                />\n                              ))}\n                            </Form.Group>\n                            <Form.Group grouped>\n                              <label>Словарь</label>\n                              {DICTIONARIES_MAP.map(([dictionary, dictionaryLabel]) => (\n                                <Form.Radio\n                                  key={dictionary}\n                                  value={dictionary}\n                                  label={dictionaryLabel}\n                                  checked={dictionary === selectedDictionary}\n                                  onChange={handleSelectedDictionaryChange}\n                                />\n                              ))}\n                            </Form.Group>\n                          </Form>\n                        </Modal.Content>\n                      </Modal>\n                    }\n                    onChange={handleWordChange}\n                  />\n                </Form>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n      <div className={styles.content}>\n        <Container>\n          <Grid padded>\n            {FORMATS_MAP.filter(([format]) => formats[format] && formats[format].length > 0).map(\n              ([format, formatLabel]) => (\n                <Grid.Row key={format}>\n                  <Grid.Column>\n                    <Divider horizontal>\n                      <Header as=\"h4\" className={styles.title}>\n                        {formatLabel}\n                      </Header>\n                    </Divider>\n                    <div className={styles.words}>\n                      {formats[format].map((word, i) => (\n                        <Label\n                          horizontal\n                          key={word}\n                          className={classNames(styles.word, i % 2 && styles.odd)}\n                        >\n                          {word}\n                        </Label>\n                      ))}\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n              ),\n            )}\n          </Grid>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default withAuth(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"content\":\"App_content__3La4L\",\"title\":\"App_title__-GfWs\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"odd\":\"App_odd__2GTiD\"};"],"sourceRoot":""}