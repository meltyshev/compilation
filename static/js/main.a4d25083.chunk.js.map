{"version":3,"sources":["with-auth.jsx","use-field.js","App.jsx","index.js","App.module.css"],"names":["WrappedComponent","initialValue","useState","value","setValue","useCallback","_","nextValue","FORMATS_MAP","DICTIONARIES_MAP","isAnagram","word1","word2","length","split","sort","join","isPlusogram","word1Sorted","word2Sorted","hasDifference","i","charAt","isMetagram","isMetanagram","replace","isLogogrif","isLogogrif2","totalDifferences","isMetagrif","isBrukva","createHybrid3","intersection","slice","toUpperCase","createSharada","dictionarySet","word","has","createEmptyFormats","selectedFormatsSet","reduce","result","format","getFormats","words","isIntersection","formats","forEach","wordDictionary","anagrams","push","plusograms","metagrams","metanagrams","logogrifs","logogrifs2","metagrifs","brukvas","hybrids3","hybrid3","sharadas","sharada","withAuth","database","setDatabase","Set","map","setSelectedFormatsSet","useField","selectedDictionary","handleSelectedDictionaryChange","handleWord1Change","handleWord2Change","useDebounce","word1Debounced","word2Debounced","word1Clean","useMemo","trim","toLowerCase","word2Clean","dictionary","set","words1","words2","Object","keys","getIntersectionFormats","endsWith","associations","array","handleSelectedFormatChange","filter","useEffect","a","async","dictionaries","sanstv","sociation","className","styles","header","Container","Grid","padded","Row","Column","width","Form","Input","fluid","autoFocus","placeholder","size","onChange","Modal","trigger","Button","icon","Header","content","Content","Group","grouped","formatLabel","Checkbox","key","label","checked","dictionaryLabel","Radio","Divider","horizontal","as","title","Label","classNames","odd","Loader","active","window","location","hostname","URLSearchParams","search","get","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a4d25083.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = '6XqqfD';\n\nexport default WrappedComponent => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      return window.location.hostname === HOSTNAME\n        && new URLSearchParams(window.location.search).get('token') === TOKEN;\n    }, []);\n\n    if (!isAuthenticated) {\n      return 'Unauthorized';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback((_, { value: nextValue }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport {\n  Button, Container, Divider, Form, Grid, Header, Input, Label, Loader, Modal,\n} from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst FORMATS_MAP = [\n  ['anagrams', 'Анаграммы'],\n  ['plusograms', 'Плюсограммы'],\n  ['metagrams', 'Метаграммы'],\n  ['metanagrams', 'Метанаграммы'],\n  ['logogrifs', 'Логогрифы'],\n  ['logogrifs2', 'Логогрифы +2'],\n  ['metagrifs', 'Метагрифы'],\n  ['brukvas', 'Брюквы'],\n  ['hybrids3', 'Гибриды (3)'],\n  ['sharadas', 'Шарады'],\n];\n\nconst DICTIONARIES_MAP = [\n  ['sanstv', 'sanstv.ru'],\n  ['sociation', 'sociation.org'],\n];\n\nconst isAnagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  return word1Sorted === word2Sorted;\n}\n\nconst isPlusogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  let hasDifference = false;\n  for (let i = 0; i < word2Sorted.length; i++) {\n    if (word1Sorted.charAt(i - +hasDifference) !== word2Sorted.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word1.length; i++) {\n    if (word1.charAt(i) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetanagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 1;\n}\n\nconst isLogogrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +hasDifference) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isLogogrif2 = (word1, word2) => {\n  if (word2.length - word1.length !== 2) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isMetagrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) !== word2.charAt(i)) {\n      totalDifferences++;\n\n      if (totalDifferences > 2) {\n        break;\n      }\n    }\n  }\n\n  if (totalDifferences === 2) {\n    return true;\n  }\n\n  totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +(totalDifferences === 2)) !== word2.charAt(i)) {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isBrukva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst createHybrid3 = (word1, word2) => {\n  const intersection = word1.slice(-3);\n  if (word2.slice(0, 3) === intersection) {\n    return word1.slice(0, -3) + intersection.toUpperCase() + word2.slice(3);\n  }\n\n  return null;\n}\n\nconst createSharada = (word1, word2, dictionarySet) => {\n  const word = word1 + word2;\n  if (dictionarySet.has(word)) {\n    return word;\n  }\n\n  return null;\n}\n\nconst createEmptyFormats = (selectedFormatsSet) => {\n  return FORMATS_MAP.reduce((result, [format]) => {\n    if (selectedFormatsSet.has(format)) {\n      return {\n        ...result,\n        [format]: [],\n      }\n    }\n\n    return result;\n  }, {});\n};\n\nconst getFormats = (word, words, dictionarySet, selectedFormatsSet, isIntersection = false) => {\n  const formats = createEmptyFormats(selectedFormatsSet);\n\n  if (word.length > 0) {\n    words.forEach((wordDictionary) => {\n      if (wordDictionary === word) {\n        return;\n      }\n\n      if (formats.anagrams && isAnagram(word, wordDictionary)) {\n        formats.anagrams.push(isIntersection ? `${word} ${wordDictionary}` : wordDictionary);\n      }\n\n      if (\n        formats.plusograms &&\n        (isPlusogram(word, wordDictionary) || isPlusogram(wordDictionary, word))\n      ) {\n        formats.plusograms.push(isIntersection ? `${word} ${wordDictionary}` : wordDictionary);\n      }\n\n      if (formats.metagrams && isMetagram(word, wordDictionary)) {\n        formats.metagrams.push(isIntersection ? `${word} ${wordDictionary}` : wordDictionary);\n      }\n\n      if (\n        formats.metanagrams &&\n        (isMetanagram(word, wordDictionary) || isMetanagram(wordDictionary, word))\n      ) {\n        formats.metanagrams.push(isIntersection ? `${word} ${wordDictionary}` : wordDictionary);\n      }\n\n      if (\n        formats.logogrifs &&\n        (isLogogrif(word, wordDictionary) || isLogogrif(wordDictionary, word))\n      ) {\n        formats.logogrifs.push(isIntersection ? `${word} ${wordDictionary}` : wordDictionary);\n      }\n\n      if (\n        formats.logogrifs2 &&\n        (isLogogrif2(word, wordDictionary) || isLogogrif2(wordDictionary, word))\n      ) {\n        formats.logogrifs2.push(isIntersection ? `${word} ${wordDictionary}` : wordDictionary);\n      }\n\n      if (\n        formats.metagrifs &&\n        (isMetagrif(word, wordDictionary) || isMetagrif(wordDictionary, word))\n      ) {\n        formats.metagrifs.push(isIntersection ? `${word} ${wordDictionary}` : wordDictionary);\n      }\n\n      if (\n        formats.brukvas &&\n        (isBrukva(word, wordDictionary) || isBrukva(wordDictionary, word))\n      ) {\n        formats.brukvas.push(isIntersection ? `${word} ${wordDictionary}` : wordDictionary);\n      }\n\n      if (formats.hybrids3 && isIntersection) {\n        let hybrid3 = createHybrid3(word, wordDictionary);\n        if (hybrid3) {\n          formats.hybrids3.push(hybrid3);\n        }\n\n        hybrid3 = createHybrid3(wordDictionary, word);\n        if (hybrid3) {\n          formats.hybrids3.push(hybrid3);\n        }\n      }\n\n      if (formats.sharadas) {\n        let sharada = createSharada(word, wordDictionary, dictionarySet);\n        if (sharada) {\n          formats.sharadas.push(sharada);\n        }\n\n        sharada = createSharada(wordDictionary, word, dictionarySet);\n        if (sharada) {\n          formats.sharadas.push(sharada);\n        }\n      }\n    });\n  }\n\n  return formats;\n}\n\nconst getIntersectionFormats = (words1, words2, dictionarySet, selectedFormatsSet) => {\n  return words1.reduce((result, word1) => {\n    const formats = getFormats(word1, words2, dictionarySet, selectedFormatsSet, true);\n\n    Object.keys(result).forEach((format) => {\n      result[format].push(...formats[format]);\n    });\n\n    return result;\n  }, createEmptyFormats(selectedFormatsSet));\n}\n\nconst App = () => {\n  const [database, setDatabase] = useState(null);\n\n  const [selectedFormatsSet, setSelectedFormatsSet] = useState(\n    new Set(FORMATS_MAP.map(([format]) => format)),\n  );\n\n  const [selectedDictionary, handleSelectedDictionaryChange] = useField('sanstv');\n\n  const [word1, handleWord1Change] = useField('');\n  const [word2, handleWord2Change] = useField('');\n\n  const [word1Debounced] = useDebounce(word1, 500);\n  const [word2Debounced] = useDebounce(word2, 500);\n\n  const word1Clean = useMemo(() => word1Debounced.trim().toLowerCase().replace('ё', 'е'), [\n    word1Debounced,\n  ]);\n\n  const word2Clean = useMemo(() => word2Debounced.trim().toLowerCase().replace('ё', 'е'), [\n    word2Debounced,\n  ]);\n\n  const formats = useMemo(() => {\n    if (!database) {\n      return {};\n    }\n\n    const dictionarySet = database.dictionary[selectedDictionary].set;\n\n    if (word2Clean) {\n      const words1 = word1Clean.endsWith('!')\n        ? [word1Clean.slice(0, -1)]\n        : [word1Clean, ...(database.associations[word1Clean] || [])];\n\n      const words2 = word2Clean.endsWith('!')\n        ? [word2Clean.slice(0, -1)]\n        : [word2Clean, ...(database.associations[word2Clean] || [])];\n\n      return getIntersectionFormats(words1, words2, dictionarySet, selectedFormatsSet);\n    }\n\n    return getFormats(\n      word1Clean,\n      database.dictionary[selectedDictionary].array,\n      dictionarySet,\n      selectedFormatsSet,\n    );\n  }, [database, selectedFormatsSet, selectedDictionary, word1Clean, word2Clean]);\n\n  const handleSelectedFormatChange = useCallback((_, { value }) => {\n    if (selectedFormatsSet.has(value)) {\n      setSelectedFormatsSet(new Set([...selectedFormatsSet].filter(format => format !== value)));\n    } else {\n      setSelectedFormatsSet(new Set([...selectedFormatsSet, value]));\n    }\n  }, [selectedFormatsSet]);\n\n  useEffect(() => {\n    (async () => {\n      const { dictionaries, associations } = await import('./database.json');\n\n      setDatabase({\n        dictionary: {\n          sanstv: {\n            array: dictionaries.sanstv,\n            set: new Set(dictionaries.sanstv),\n          },\n          sociation: {\n            array: dictionaries.sociation,\n            set: new Set(dictionaries.sociation),\n          },\n        },\n        associations,\n      });\n    })();\n  }, []);\n\n  if (!database) {\n    return <Loader active>Загружаю базу...</Loader>;\n  }\n\n  return (\n    <>\n      <div className={styles.header}>\n        <Container>\n          <Grid padded>\n            <Grid.Row>\n              <Grid.Column width={8}>\n                <Form>\n                  <Input\n                    fluid\n                    autoFocus\n                    value={word1}\n                    placeholder=\"Слово\"\n                    size=\"big\"\n                    onChange={handleWord1Change}\n                  />\n                </Form>\n              </Grid.Column>\n              <Grid.Column width={7}>\n                <Form>\n                  <Input\n                    fluid\n                    value={word2}\n                    placeholder=\"Второе слово (пересечение по ассоциатору)\"\n                    size=\"big\"\n                    onChange={handleWord2Change}\n                  />\n                </Form>\n              </Grid.Column>\n              <Grid.Column width={1}>\n                <Modal size=\"mini\" trigger={<Button size=\"big\" icon=\"setting\" />}>\n                  <Header icon=\"setting\" content=\"Настройки\" />\n                  <Modal.Content>\n                    <Form>\n                      <Form.Group grouped>\n                        <label>Форматы</label>\n                        {FORMATS_MAP.map(([format, formatLabel]) => (\n                          <Form.Checkbox\n                            key={format}\n                            value={format}\n                            label={formatLabel}\n                            checked={selectedFormatsSet.has(format)}\n                            onChange={handleSelectedFormatChange}\n                          />\n                        ))}\n                      </Form.Group>\n                      <Form.Group grouped>\n                        <label>Словарь</label>\n                        {DICTIONARIES_MAP.map(([dictionary, dictionaryLabel]) => (\n                          <Form.Radio\n                            key={dictionary}\n                            value={dictionary}\n                            label={dictionaryLabel}\n                            checked={dictionary === selectedDictionary}\n                            onChange={handleSelectedDictionaryChange}\n                          />\n                        ))}\n                      </Form.Group>\n                    </Form>\n                  </Modal.Content>\n                </Modal>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n      <div className={styles.content}>\n        <Container>\n          <Grid padded>\n            {FORMATS_MAP.filter(([format]) => formats[format] && formats[format].length > 0).map(\n              ([format, formatLabel]) => (\n                <Grid.Row key={format}>\n                  <Grid.Column>\n                    <Divider horizontal>\n                      <Header as=\"h4\" className={styles.title}>\n                        {formatLabel}\n                      </Header>\n                    </Divider>\n                    <div className={styles.words}>\n                      {formats[format].map((word, i) => (\n                        <Label\n                          horizontal\n                          key={word}\n                          className={classNames(styles.word, i % 2 && styles.odd)}\n                        >\n                          {word}\n                        </Label>\n                      ))}\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n              ),\n            )}\n          </Grid>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default withAuth(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"content\":\"App_content__3La4L\",\"title\":\"App_title__-GfWs\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"odd\":\"App_odd__2GTiD\"};"],"sourceRoot":""}